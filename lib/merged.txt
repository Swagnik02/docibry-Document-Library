Date: 2024-08-16 18:40:16

Root File Path: g:\coding\docibry\lib
Directory Tree:
- lib/
    - main.dart
    - blocs/
        - document/
            - document_bloc.dart
            - document_event.dart
            - document_state.dart
        - profile/
            - profile_bloc.dart
            - profile_event.dart
            - profile_state.dart
        - search/
            - search_bloc.dart
            - search_event.dart
            - search_state.dart
    - constants/
        - color_constants.dart
        - string_constants.dart
    - models/
        - document_model.dart
        - user_model.dart
    - repositories/
        - document_repository.dart
        - profile_repository.dart
    - ui/
        - document/
            - add_document_page.dart
            - custom_tab.dart
            - document_view_edit_page.dart
        - home/
            - doc_card.dart
            - doc_category_filter_chip.dart
            - home_page.dart
            - search_bar.dart
        - profile/
            - profile_page.dart
        - widgets/
            - custom_app_bar.dart
            - floating_add_button.dart


--- ./main.dart ---
import 'package:docibry/blocs/document/document_event.dart';
import 'package:docibry/constants/string_constants.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'blocs/document/document_bloc.dart';
import 'ui/home/home_page.dart';
import 'ui/document/add_document_page.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => DocumentBloc()..add(FetchDocuments()),
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: StringConstants.appFullName,
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepOrange),
        ),
        home: const HomePage(),
        routes: {
          '/addDocument': (context) => const AddDocumentPage(),
          // '/documentViewEdit': (context) => const DocumentViewEditPage(),
          // '/profile': (context) => const ProfilePage(),
        },
      ),
    );
  }
}


--- blocs\document/document_bloc.dart ---
import 'dart:developer';

import 'package:bloc/bloc.dart';
import 'package:docibry/models/document_model.dart';
import 'document_event.dart';
import 'document_state.dart';

class DocumentBloc extends Bloc<DocumentEvent, DocumentState> {
  DocumentBloc() : super(DocumentInitial()) {
    on<FetchDocuments>(_onFetchDocuments);
    on<AddDocument>(_onAddDocument);
  }

  void _onFetchDocuments(
      FetchDocuments event, Emitter<DocumentState> emit) async {
    try {
      emit(DocumentLoading());
      // Fetch documents from a data source (e.g., API, database)
      final List<DocModel> documents = []; // Explicitly define the type
      emit(DocumentLoaded(documents: documents));
    } catch (e) {
      emit(DocumentError(error: e.toString()));
    }
  }

  void _onAddDocument(AddDocument event, Emitter<DocumentState> emit) {
    if (state is DocumentLoaded) {
      final updatedDocs =
          List<DocModel>.from((state as DocumentLoaded).documents)
            ..add(DocModel(
              uid: 'new_uid', // Generate a new UID
              docName: event.docName,
              docCategory: event.docCategory,
              docId: event.docId,
              holdersName: event.holdersName,
              dateAdded: DateTime.now(),
              docFile: 'path_to_file', // Update with the actual file path
            ));
      log('Document added successfully'); // Log success message
      emit(DocumentLoaded(documents: updatedDocs));
    } else {
      log('Document state is not loaded'); // Log error if state is incorrect
    }
  }
}


--- blocs\document/document_event.dart ---
import 'package:equatable/equatable.dart';

abstract class DocumentEvent extends Equatable {
  const DocumentEvent();

  @override
  List<Object?> get props => [];
}

class FetchDocuments extends DocumentEvent {}

class AddDocument extends DocumentEvent {
  final String docName;
  final String docCategory;
  final String docId;
  final String holdersName;

  const AddDocument({
    required this.docName,
    required this.docCategory,
    required this.docId,
    required this.holdersName,
  });

  @override
  List<Object?> get props => [docName, docCategory, docId, holdersName];
}


--- blocs\document/document_state.dart ---
import 'package:equatable/equatable.dart';
import 'package:docibry/models/document_model.dart';

abstract class DocumentState extends Equatable {
  const DocumentState();

  @override
  List<Object?> get props => [];
}

class DocumentInitial extends DocumentState {}

class DocumentLoading extends DocumentState {}

class DocumentLoaded extends DocumentState {
  final List<DocModel> documents;

  const DocumentLoaded({required this.documents});

  @override
  List<Object?> get props => [documents];
}

class DocumentError extends DocumentState {
  final String error;

  const DocumentError({required this.error});

  @override
  List<Object?> get props => [error];
}


--- blocs\profile/profile_bloc.dart ---
 


--- blocs\profile/profile_event.dart ---
 


--- blocs\profile/profile_state.dart ---
 


--- blocs\search/search_bloc.dart ---
 


--- blocs\search/search_event.dart ---
 


--- blocs\search/search_state.dart ---
 


--- constants/color_constants.dart ---
// lib/constants/color_constants.dart
import 'package:flutter/material.dart';

class ColorConstants {
  static const Color black = Color.fromARGB(255, 0, 0, 0);
  static const Color white = Color.fromARGB(255, 255, 255, 255);
  static const Color cream = Color.fromARGB(255, 245, 245, 220);
  static const Color lightPink = Color.fromARGB(255, 255, 208, 200);

  // Define a map for category colors
  static final Map<String, Color> categoryColors = {
    'Identity': Color.fromARGB(255, 254, 67, 35), // Example: Aadhaar
    'Education':
        Color.fromRGBO(249, 215, 45, 1.0), // Example: Degree Certificate
    'Work': Color.fromRGBO(0, 0, 0, 1.0), // Example: Offer Letter
    'Finance': Color.fromARGB(255, 128, 128, 0), // Example: Bank Statement
    'Travel': Color.fromRGBO(249, 243, 209, 1.0), // Example: Visa
  };

  // Define a map for category text colors
  static final Map<String, Color> categoryTextColors = {
    'Identity': Colors.white,
    'Education': Colors.black,
    'Work': Colors.white,
    'Finance': Colors.white,
    'Travel': Colors.black,
  };

  // Get color for a specific category
  static Color getCategoryColor(String category) {
    return categoryColors[category] ??
        white; // Default to white if category not found
  }

  // Get text color for a specific category
  static Color getCategoryTextColor(String category) {
    return categoryTextColors[category] ??
        black; // Default to black if category not found
  }
}


--- constants/string_constants.dart ---
class StringDocCategory {
  // Category constants

  static const String allCategory = 'All';
  static const String identity = 'Identity';
  static const String education = 'Education';
  static const String work = 'Work';
  static const String finance = 'Finance';
  static const String travel = 'Travel';
  static const String health = 'Health';
  static const String legal = 'Legal';
  static const String personal = 'Personal';
  static const String property = 'Property';
  static const String miscellaneous = 'Miscellaneous';

  // List of all categories
  static const List<String> categoryList = [
    identity,
    education,
    work,
    finance,
    travel,
    health,
    legal,
    personal,
    property,
    miscellaneous,
  ];
}

class StringConstants {
  static const String appName = 'docibry';
  static const String appFullName = 'docibry: Document Library';
  static const String stringDoc = 'Doc';
  static const String stringData = 'Data';
}


--- models/document_model.dart ---
import 'package:docibry/constants/string_constants.dart';

class DocModel {
  final String uid;
  final String docName;
  final String docCategory;
  final String docId;
  final String holdersName;
  final DateTime dateAdded;
  final String docFile;

  DocModel({
    required this.uid,
    required this.docName,
    required this.docCategory,
    required this.docId,
    required this.holdersName,
    required this.dateAdded,
    required this.docFile,
  });

  factory DocModel.fromMap(Map<String, dynamic> map) {
    return DocModel(
      uid: map['uid'] ?? '',
      docName: map['docName'] ?? '',
      docCategory: map['docCategory'] ?? '',
      docId: map['docId'] ?? '',
      holdersName: map['holdersName'] ?? '',
      dateAdded: DateTime.parse(map['dateAdded'] ?? DateTime.now().toString()),
      docFile: map['docFile'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'uid': uid,
      'docName': docName,
      'docCategory': docCategory,
      'docId': docId,
      'holdersName': holdersName,
      'dateAdded': dateAdded.toIso8601String(),
      'docFile': docFile,
    };
  }
}

// Sample documents for testing
DocModel doc1 = DocModel(
  uid: '001',
  docName: 'Aadhaar',
  docCategory: StringDocCategory.identity,
  docId: '123456',
  holdersName: 'Swagnik',
  dateAdded: DateTime(2024, 1, 15),
  docFile: 'docFile',
);

DocModel doc2 = DocModel(
  uid: '002',
  docName: 'Marksheet',
  docCategory: StringDocCategory.education,
  docId: '12',
  holdersName: 'Swagnik',
  dateAdded: DateTime(2023, 12, 22),
  docFile: 'docFile',
);

DocModel doc3 = DocModel(
  uid: '003',
  docName: 'Health Card',
  docCategory: StringDocCategory.health,
  docId: '12',
  holdersName: 'Swagnik',
  dateAdded: DateTime(2024, 2, 5),
  docFile: 'docFile',
);


--- models/user_model.dart ---



--- repositories/document_repository.dart ---
 


--- repositories/profile_repository.dart ---
 


--- ui\document/add_document_page.dart ---
import 'dart:developer';

import 'package:docibry/blocs/document/document_bloc.dart';
import 'package:docibry/blocs/document/document_event.dart';
import 'package:docibry/blocs/document/document_state.dart';
import 'package:docibry/constants/string_constants.dart';
import 'package:docibry/models/document_model.dart';
import 'package:docibry/ui/document/custom_tab.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class AddDocumentPage extends StatefulWidget {
  const AddDocumentPage({super.key});

  @override
  _AddDocumentPageState createState() => _AddDocumentPageState();
}

class _AddDocumentPageState extends State<AddDocumentPage>
    with SingleTickerProviderStateMixin {
  String? _selectedCategory;
  late TabController _tabController;
  late TextEditingController _docNameController;
  late TextEditingController _docIdController;
  late TextEditingController _holderNameController;

  @override
  void initState() {
    super.initState();
    _selectedCategory = StringDocCategory.categoryList.isNotEmpty
        ? StringDocCategory.categoryList.first
        : null;
    _tabController = TabController(length: 2, vsync: this);
    _docNameController = TextEditingController();
    _docIdController = TextEditingController();
    _holderNameController = TextEditingController();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _docNameController.dispose();
    _docIdController.dispose();
    _holderNameController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        title: const Text(
          'Add Document',
          style: TextStyle(fontSize: 30, fontWeight: FontWeight.w400),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.person),
            onPressed: () {
              Navigator.pushNamed(context, '/profile');
            },
          ),
        ],
      ),
      body: BlocListener<DocumentBloc, DocumentState>(
        listener: (context, state) {
          if (state is DocumentLoaded) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Document added successfully!')),
            );
          } else if (state is DocumentError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error: ${state.error}')),
            );
          }
        },
        child: Column(
          children: [
            docNameTextField(),
            customTabs(),
            submitButton(context),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(context, '/addDocument');
        },
        child: const Icon(Icons.share),
      ),
    );
  }

  Expanded customTabs() {
    return Expanded(
      child: CustomTabBarView(
        tabs: const [
          Tab(text: StringConstants.stringDoc),
          Tab(text: StringConstants.stringData),
        ],
        tabViews: [
          tab1(),
          tab2(),
        ],
      ),
    );
  }

  Padding docNameTextField() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 80, vertical: 16),
      child: TextField(
        controller: _docNameController,
        textCapitalization: TextCapitalization.words,
        textAlign: TextAlign.center,
        decoration: const InputDecoration(
          hintText: 'Enter Document Name',
          border: OutlineInputBorder(
            borderRadius: BorderRadius.all(
              Radius.circular(10),
            ),
          ),
        ),
      ),
    );
  }

  Widget tab1() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: SizedBox(
        height: 500,
        width: double.infinity,
        child: Card(
          elevation: 3,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              IconButton(
                onPressed: () {
                  // Handle document upload
                },
                icon: const Icon(Icons.add),
              ),
              const Text('Add doc'),
            ],
          ),
        ),
      ),
    );
  }

  Widget tab2() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: SizedBox(
        width: double.infinity,
        child: Card(
          elevation: 3,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.0),
          ),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 50),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                DropdownButton<String>(
                  elevation: 1,
                  padding: const EdgeInsets.symmetric(horizontal: 30),
                  focusColor: Colors.transparent,
                  dropdownColor: Theme.of(context).colorScheme.primaryContainer,
                  borderRadius: BorderRadius.circular(10),
                  alignment: Alignment.center,
                  value: _selectedCategory,
                  items: StringDocCategory.categoryList.map((String category) {
                    return DropdownMenuItem<String>(
                      value: category,
                      child: Text(category),
                    );
                  }).toList(),
                  onChanged: (String? newValue) {
                    setState(() {
                      _selectedCategory = newValue;
                    });
                  },
                  hint: const Text('Select Category'),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: TextField(
                    controller: _docIdController,
                    decoration: const InputDecoration(
                      labelText: "Document ID",
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: TextField(
                    controller: _holderNameController,
                    decoration: const InputDecoration(
                      labelText: "Holder's Name",
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Container submitButton(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 50, vertical: 20),
      padding: const EdgeInsets.all(20),
      width: double.infinity,
      child: OutlinedButton(
        onPressed: () {
          if (_docNameController.text.isNotEmpty &&
              _docIdController.text.isNotEmpty &&
              _holderNameController.text.isNotEmpty &&
              _selectedCategory != null) {
            final docModel = DocModel(
              uid: 'new_uid', // Generate UID
              docName: _docNameController.text,
              docCategory: _selectedCategory.toString(),
              docId: _docIdController.text,
              holdersName: _holderNameController.text,
              dateAdded: DateTime.now(),
              docFile: 'docFile',
            );

            log(docModel.toMap().toString());

            context.read<DocumentBloc>().add(
                  AddDocument(
                    docName: docModel.docName,
                    docCategory: docModel.docCategory,
                    docId: docModel.docId,
                    holdersName: docModel.holdersName,
                  ),
                );
            Navigator.pop(context);
          } else {
            // Handle form validation errors
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Please fill all fields')),
            );
          }
        },
        child: const Text('SUBMIT'),
      ),
    );
  }
}


--- ui\document/custom_tab.dart ---
import 'package:flutter/material.dart';

class CustomTabBarView extends StatefulWidget {
  final List<Widget> tabs;
  final List<Widget> tabViews;

  const CustomTabBarView({
    super.key,
    required this.tabs,
    required this.tabViews,
  });

  @override
  _CustomTabBarViewState createState() => _CustomTabBarViewState();
}

class _CustomTabBarViewState extends State<CustomTabBarView>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: widget.tabs.length, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 0),
          decoration: BoxDecoration(
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                spreadRadius: 2,
                blurRadius: 5,
                offset: const Offset(0, 3),
              ),
            ],
            color: Theme.of(context).colorScheme.surfaceContainerLow,
            borderRadius: BorderRadius.circular(25.0),
          ),
          child: TabBar(
            controller: _tabController,
            indicatorSize: TabBarIndicatorSize.tab,
            indicator: BoxDecoration(
              color: Colors.black,
              borderRadius: BorderRadius.circular(25),
            ),
            dividerColor: Colors.transparent,
            labelColor: Theme.of(context).colorScheme.surfaceContainerLow,
            unselectedLabelColor: Colors.black,
            labelStyle: const TextStyle(fontWeight: FontWeight.bold),
            unselectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold),
            tabs: widget.tabs,
          ),
        ),
        Expanded(
          child: TabBarView(
            controller: _tabController,
            children: widget.tabViews,
          ),
        ),
      ],
    );
  }
}


--- ui\document/document_view_edit_page.dart ---
 


--- ui\home/doc_card.dart ---
import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:docibry/models/document_model.dart';

class DocCard extends StatelessWidget {
  final DocModel docModel;

  const DocCard({super.key, required this.docModel});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        log(docModel.toMap().toString());
        Navigator.pushNamed(
          context,
          '/documentViewEdit',
          arguments: docModel, // Pass the document model as an argument
        );
      },
      child: Container(
        height: 150,
        padding: const EdgeInsets.all(16),
        margin: const EdgeInsets.only(top: 16, right: 16, left: 16),
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.secondaryContainer,
          borderRadius: BorderRadius.circular(25),
        ),
        width: double.infinity,
        child: Text(
          docModel.docName,
          style: const TextStyle(color: Colors.black),
        ),
      ),
    );
  }
}


--- ui\home/doc_category_filter_chip.dart ---
import 'package:flutter/material.dart';

class DocCategoryFilterChip extends StatelessWidget {
  final String label;
  final bool isSelected;
  final bool isDisabled;
  final ValueChanged<String> onSelected;

  const DocCategoryFilterChip({
    super.key,
    required this.label,
    required this.isSelected,
    this.isDisabled = false,
    required this.onSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4.0),
      child: ChoiceChip(
        showCheckmark: false,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.all(Radius.circular(35)),
        ),
        label: Text(
          label,
          style: TextStyle(
            color: isDisabled
                ? Colors.grey
                : (isSelected
                    ? Theme.of(context).colorScheme.onPrimary
                    : Colors.black),
          ),
        ),
        selected: isSelected,
        backgroundColor: isDisabled ? Colors.grey.shade200 : Colors.transparent,
        selectedColor: Theme.of(context).colorScheme.primary,
        onSelected: isDisabled ? null : (_) => onSelected(label),
      ),
    );
  }
}


--- ui\home/home_page.dart ---
import 'package:docibry/ui/document/add_document_page.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:docibry/blocs/document/document_bloc.dart';
import 'package:docibry/blocs/document/document_event.dart';
import 'package:docibry/blocs/document/document_state.dart';
import 'package:docibry/constants/string_constants.dart';
import 'doc_card.dart';
import 'doc_category_filter_chip.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String selectedCategory = StringDocCategory.allCategory; // Default to 'All'

  void _onCategorySelected(String category) {
    setState(() {
      selectedCategory = category;
    });
  }

  @override
  void initState() {
    DocumentBloc()..add(FetchDocuments());
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          StringConstants.appName,
          style: TextStyle(fontSize: 30, fontWeight: FontWeight.w400),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.person),
            onPressed: () {
              // Navigate to profile or handle other actions
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // Search bar
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: TextField(
              decoration: InputDecoration(
                hintText: 'Search documents...',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.all(
                    Radius.circular(25),
                  ),
                ),
                prefixIcon: Icon(Icons.search),
              ),
            ),
          ),
          // Categories Row
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                DocCategoryFilterChip(
                  label: StringDocCategory.allCategory,
                  isSelected: selectedCategory == StringDocCategory.allCategory,
                  onSelected: _onCategorySelected,
                ),
                ...StringDocCategory.categoryList
                    .where(
                        (category) => category != StringDocCategory.allCategory)
                    .map((category) {
                  return DocCategoryFilterChip(
                    label: category,
                    isSelected: selectedCategory == category,
                    onSelected: _onCategorySelected,
                  );
                }).toList(),
              ],
            ),
          ),
          // Document tiles
          Expanded(
            child: BlocBuilder<DocumentBloc, DocumentState>(
              builder: (context, state) {
                if (state is DocumentLoading) {
                  return const Center(child: CircularProgressIndicator());
                } else if (state is DocumentLoaded) {
                  final filteredDocs = state.documents
                      .where((doc) =>
                          selectedCategory == StringDocCategory.allCategory ||
                          doc.docCategory == selectedCategory)
                      .toList();

                  if (filteredDocs.isEmpty) {
                    return const Center(child: Text('No documents found'));
                  }

                  return ListView.builder(
                    itemCount: filteredDocs.length,
                    itemBuilder: (context, index) {
                      return DocCard(docModel: filteredDocs[index]);
                    },
                  );
                } else if (state is DocumentError) {
                  return Center(child: Text('Error: ${state.error}'));
                }
                return const Center(child: Text('No documents available'));
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => const AddDocumentPage()),
          );
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}


--- ui\home/search_bar.dart ---
 


--- ui\profile/profile_page.dart ---
 


--- ui\widgets/custom_app_bar.dart ---
 


--- ui\widgets/floating_add_button.dart ---
 


